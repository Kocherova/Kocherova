const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const getRandomElement = array => array[getRandomIndex(array)];
banana

const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
4 / 74
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const variableName = getRandomNumber();
const deepClone = obj => JSON.parse(JSON.stringify(obj));
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const greet = name => `Hello, ${name}!`;
const randomNumber = getRandomNumber();
banana

const findLargestNumber = numbers => Math.max(...numbers);
const findSmallestNumber = numbers => Math.min(...numbers);
const sum = (a, b) => a + b;
grape

const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
45,45,13,17,36,44,28,98,84,99,58,84,67,37,28,12,70,47,81,64,86,16,91,62,51,10,74,88,10,47,42,7,28,63,34,54,80,74,89,22,65,12,47,40,36,28,66,8,79,2,80,0,30,7,30,19,62,51 * 32
let array = getRandomArray(); array.forEach(item => console.log(item));
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
let array = getRandomArray(); array.forEach(item => console.log(item));
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
console.log(getRandomString());

const fetchData = async url => { const response = await fetch(url); return response.json(); }
grape / 81,20,86,2,57,15,49,84,35,68,42,80,59,14,40,44,16,19,39,97,92,6,4,74,1,21,82,2,43,28,67,66,42,55,58,38,21,59,19,61,69,17,75,69,20,55,81,28,83,4,56,59,33,12,56,78,69,3,47,58,82,59,86,41,31,79,89,56,24,79,41,41,55,90,59,30,98,87,80,10,32,65,12,68,73,82,22
const getRandomIndex = array => Math.floor(Math.random() * array.length);
false + true
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const getRandomIndex = array => Math.floor(Math.random() * array.length);

grape / kiwi
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

orange

const removeDuplicates = array => Array.from(new Set(array));

0 + 9,21,65,96,88,95,84,75,70,49,7,96,34,99,61,20,77,43,19,92,0,10,78,94,4,17,16,81,69,40,44,25,72,18,66,21,68,83,75,94,97,73,76,34,67,52,42,60,80,9,98,57,17,33,34,80,94,41
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const isEven = num => num % 2 === 0;
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
